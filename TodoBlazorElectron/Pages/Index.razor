@page "/"

@using TodoBlazorElectron.Entities;
@using LiteDB;
@*<SurveyPrompt Title="How is Blazor working for you?" />*@

<MudText Typo="Typo.h6">MudBlazor is </MudText>
<MudButton Variant="Variant.Filled" Color="Color.Primary">Textttttatfffdtftt</MudButton>

<MudItem xs="12" sm="6" md="4">
    <MudDatePicker Label="Finish until" @bind-Date="date" DisableToolbar="true" />
</MudItem>

@date

<MudGrid>
    <MudItem xs="6" sm="6" md="4">
        <MudTextField @bind-Value="TextValue" Label="Standard" Variant="Variant.Text"></MudTextField>
    </MudItem>
    <MudItem xs="1" sm="1" md="1" Class="mt-4">
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="Add">Add</MudButton>
    </MudItem>
</MudGrid>

@foreach (var todo in todoList)
{
    <li>@todo.Description - @todo.CreatedAt</li>
}
asd
<MudItem xs="12" sm="6" md="4">
    <MudSelect T="int" @bind-Value="@SelectedPriority" Label="Priotiy">
        @foreach (var priority in PriorityList)
        {
            <MudSelectItem Value="@priority.Key">@priority.Value <MudIcon Icon="@Icons.Material.Filled.PriorityHigh" Title="Critical Priority" /></MudSelectItem>
        }
        <MudSelectItem Value="3">Critical <MudIcon Icon="@Icons.Material.Filled.PriorityHigh" Title="Critical Priority" /></MudSelectItem>
        <MudSelectItem Value="2">High <MudIcon Icon="@Icons.Material.Filled.ArrowDropUp" Title="High Priority" /> </MudSelectItem>
        <MudSelectItem Value="1">Medium <MudIcon Icon="@Icons.Material.Filled.Circle" Title="Medium Priority" /></MudSelectItem>
        <MudSelectItem Value="0">Low <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" Title="Low Priority" /> </MudSelectItem>
    </MudSelect>
</MudItem>

@code {

    Dictionary<int, string> PriorityList = new()
    {
            { 1, "High" },
            { 2, "Medium" }
        };

    List<ToDo> todoList { get; set; }

    public int SelectedPriority { get; set; } = 1;
    DateTime? date = DateTime.Now;
    public string TextValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        todoList = GetAllTodos();
    }

    List<ToDo> GetAllTodos()
    {
        using var db = new LiteDatabase(@"MyData.db");

        var todos = db.GetCollection<ToDo>("todos").FindAll().ToList();

        return todos;
    }

    async Task Add()
    {
        date = date.Value.AddDays(2);

        using var db = new LiteDatabase(@"MyData.db");

        var todos = db.GetCollection<ToDo>("todos");

        var todo = new ToDo
        {
            Description = TextValue,
            Deadline = date
        };

        todos.Insert(todo);

        var results = todos.Find(x => x.CreatedAt > new DateTime(2020, 01, 01));


    }
}